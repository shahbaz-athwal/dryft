generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  prefix     String      @id @unique
  name       String
  rmpId      String?     @unique
  lastSync   DateTime?
  professors Professor[]
  courses    Course[]

  @@index([prefix])
  @@index([rmpId])
  @@map("department")
}

model Professor {
  id               String            @id
  departmentPrefix String
  department       Department        @relation(fields: [departmentPrefix], references: [prefix], onDelete: Cascade)
  name             String
  rmpId            String?           @unique
  imageUrl         String?
  lastSync         DateTime?
  courses          CourseProfessor[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  sections         Section[]

  @@index([name])
  @@index([departmentPrefix])
  @@index([rmpId])
  @@map("professor")
}

model Course {
  id               String            @id
  code             String            @unique
  title            String
  description      String?
  departmentPrefix String
  sectionIds       String[]
  sections         Section[]
  department       Department        @relation(fields: [departmentPrefix], references: [prefix], onDelete: Cascade)
  professors       CourseProfessor[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  lastSync         DateTime?

  @@index([code])
  @@index([departmentPrefix])
  @@map("course")
}

model Section {
  id          String    @id
  code        String
  description String?
  Course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  professorId String
  startDate   DateTime
  endDate     DateTime
  classTime   String
  room        String
  days        Int[]
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())

  @@map("section")
}

model CourseProfessor {
  id          String    @id @default(uuid())
  courseId    String
  professorId String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)

  @@unique([courseId, professorId])
  @@map("course_professor")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@index([email])
  @@map("user")
}

// Better Auth
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
