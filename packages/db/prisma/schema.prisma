generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String      @id @default(uuid())
  name        String
  description String
  rmpId       String?
  rmpName     String?
  Professor   Professor[]
  Course      Course[]

  @@map("department")
}

model Professor {
  id           String            @id @default(uuid())
  departmentId String
  department   Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  name         String
  description  String
  rmpId        String?
  rmpFirstName String?
  rmpLastName  String?
  imageUrl     String?
  courses      CourseProfessor[]

  @@map("professor")
}

model Course {
  id           String            @id @default(uuid())
  name         String
  description  String
  rmpName      String?
  departmentId String
  department   Department        @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  professors   CourseProfessor[]

  @@map("course")
}

model CourseProfessor {
  id          String    @id @default(uuid())
  courseId    String
  professorId String
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Cascade)

  @@unique([courseId, professorId])
  @@map("course_professor")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  emailVerified Boolean
  image         String?
  sessions      Session[]
  accounts      Account[]

  @@map("user")
}

// Better Auth
model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
